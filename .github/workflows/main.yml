name: QRkot-Google CI/CD

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:

  tests:
    name: Tests flake8 and pytest
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9, 3.11]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            -r requirements.txt \
            flake8 pep8-naming \
            flake8-broken-line \
            flake8-return \
            flake8-isort \
            pytest-cov 
      - name: Run Tests
        run: |
          python -m flake8
          pytest --cov --cov-report=xml
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}   

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub 
        uses: docker/build-push-action@v2 
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/google:latest           

  server_environment:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3    
      - name: Create directory and .env-file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo mkdir -p ${{ secrets.DEPLOY_DIR }}
            sudo chmod 777 ${{ secrets.DEPLOY_DIR }} 
            cd ${{ secrets.DEPLOY_DIR }}
            sudo cat > .env << _EOF_
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              SECRET=${{ secrets.SECRET }}
              FIRST_SUPERUSER_EMAIL=${{ secrets.FIRST_SUPERUSER_EMAIL }}
              FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
              TYPE=${{ secrets.TYPE }}
              PROJECT_ID=${{ secrets.PROJECT_ID }}
              PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }}
              PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
              CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}
              CLIENT_ID=${{ secrets.CLIENT_ID }}
              AUTH_URI=${{ secrets.AUTH_URI }}
              TOKEN_URI=${{ secrets.TOKEN_URI }}
              AUTH_PROVIDER_X509_CERT_URL=${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
              CLIENT_X509_CERT_URL=${{ secrets.CLIENT_X509_CERT_URL }}
              EMAIL=${{ secrets.EMAIL }}
            _EOF_
      - name: copy infra files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/docker-compose.yaml, infra/nginx.conf"
          target: ${{ secrets.DEPLOY_DIR }}
          overwrite: true
          # strip_components: 1

  deploy:
    runs-on: ubuntu-latest
    needs: server_environment
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ secrets.DEPLOY_DIR }}
            #sudo docker rm -vf $(docker ps -aq)
            #sudo docker rmi -f $(docker images -aq)
            sudo docker compose -f infra/docker-compose.yaml up -d --quiet-pull

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} проекта QRkot-spreadsheets успешно выполнен!
